/**
 * Automatically generated types for motia
 * Do NOT edit this file manually.
 * 
 * Consider adding this file to .prettierignore and eslint ignore.
 */
import { EventHandler, ApiRouteHandler, ApiResponse, MotiaStream, CronHandler } from 'motia'

declare module 'motia' {
  interface FlowContextStateStreams {
    
  }

  interface Handlers {
    'MetricsEndpoint': ApiRouteHandler<Record<string, unknown>, ApiResponse<200, { system: { totalSites: number; upSites: number; downSites: number; overallUptimePercentage: number; averageResponseTime: number; lastUpdate: number }; sites: Record<string, { url: string; averageResponseTime: number; uptimePercentage: number; totalChecks: number; successfulChecks: number; lastDownTime?: string; lastUpTime?: string; consecutiveFailures: number; maxResponseTime: number; minResponseTime: number }>; timestamp: string }>, never>
    'SiteHistory': ApiRouteHandler<Record<string, unknown>, ApiResponse<200, { url: string; history: { url: string; status: 'UP' | 'DOWN'; code: unknown; responseTime: number; checkedAt: string; error: unknown }[]; total: number; timestamp: string }> | ApiResponse<404, { error: string; message: string }>, never>
    'HealthCheck': ApiRouteHandler<Record<string, unknown>, ApiResponse<200, { status: 'ok' | 'degraded' | 'down'; sitesConfigured: number; lastKnown: Record<string, unknown>; now: string; metrics?: { totalUptime: number; averageResponseTime: number; activeAlerts: number }; version?: string; uptime?: number }>, never>
    'UptimeCronTrigger': CronHandler<{ topic: 'check.requested'; data: { url: string } }>
    'WebsiteChecker': EventHandler<{ url: string }, { topic: 'check.result'; data: { url: string; status: 'UP' | 'DOWN'; code: unknown; responseTime: number; checkedAt: string; error: unknown } }>
    'TerminalAlerter': EventHandler<{ url: string; status: 'UP' | 'DOWN'; code: unknown; responseTime: number; checkedAt: string; error: unknown }, never>
  }
}